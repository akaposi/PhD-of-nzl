\AgdaHide{
\begin{code}

module GroupoidLaws where


open import Relation.Binary.PropositionalEquality 
open import Data.Product renaming (_,_ to _,,_)
open import Data.Nat


open import AIOOG renaming (_∾_ to htrans)
open import AIOOGS2
open import Suspension
open import BasicLaws


\end{code}
}

As long as the basic laws are defined, we can move to one level higher, to verfiy the five groupoid laws. Similarly the basic ones are inhabited trivially because of the contexts are contractible, the general ones can be generated by lifting functions.

\begin{code}

G*-Con : Con
G*-Con = sym*-Con

vX : Tm {G*-Con} *
vX = var (vS (vS v0))

vY : Tm {G*-Con} *
vY = var (vS v0)

vXY : Tm {G*-Con} (vX =h vY)
vXY = var v0

reflX : Tm (vX =h vX)
reflX = Tm-refl' * +tm _ +tm _

reflY : Tm (vY =h vY)
reflY =  Tm-refl' * +tm _

Tm-G1* : Tm (trans*-Tm [ IdCm _ , vY , reflY ]tm =h vXY)
Tm-G1* = Coh-Contr (ext c* v0)

Tm-G2* : Tm (trans*-Tm [ ((IdCm _ ⊚ pr1 ⊚ pr1) , vX) , reflX , vY , vXY ]tm =h vXY)
Tm-G2* = Coh-Contr (ext c* v0)


Tm-G3* : Tm (trans*-Tm [ ((IdCm _) , vX) , Tm-sym* ]tm =h reflX)
Tm-G3* = Coh-Contr (ext c* v0)


Tm-G4* : Tm (trans*-Tm [ ((• , vY) , vX , Tm-sym* , vY) , vXY ]tm =h reflY)
Tm-G4* = Coh-Contr (ext c* v0)

G5*-Con : Con
G5*-Con = trans*-Con , * , (var (vS (vS v0)) =h var v0)

-- m n mn p np q pq

vM : Tm {G5*-Con} *
vM = var (vS (vS (vS (vS (vS (vS v0))))))

vN : Tm {G5*-Con} *
vN = var (vS (vS (vS (vS (vS v0)))))

vMN : Tm {G5*-Con} (vM =h vN)
vMN = var (vS (vS (vS (vS v0))))

vP : Tm {G5*-Con} *
vP = var (vS (vS (vS v0)))

vNP : Tm {G5*-Con} (vN =h vP)
vNP = var (vS (vS v0))

vQ : Tm {G5*-Con} *
vQ = var (vS v0)

vPQ : Tm {G5*-Con} (vP =h vQ)
vPQ = var v0

Ty-G5* : Ty G5*-Con
Ty-G5* = (trans*-Tm [ ((((• , vM) , vP) , 
                    (trans*-Tm [ pr1 ⊚ pr1 ]tm)) , vQ) , vPQ ]tm =h 
          trans*-Tm [ (IdCm _ +S _ +S _ +S _ +S _ , vQ) , 
                    (trans*-Tm [ ((((• , vN) , vP) , vNP) , vQ) , vPQ ]tm) ]tm)

Tm-G5* : Tm (trans*-Tm [ ((((• , vM) , vP) , 
                       (trans*-Tm [ pr1 ⊚ pr1 ]tm)) , vQ) , vPQ ]tm =h 
             trans*-Tm [ (pr1 ⊚ pr1 ⊚ pr1 ⊚ pr1 , vQ) , 
                       (trans*-Tm [ ((((• , vN) , vP) , vNP) , vQ) , vPQ ]tm) ]tm)
Tm-G5* = Coh-Contr (ext (ext (ext c* v0) (vS v0)) (vS v0))

Tm-G5 : {Γ : Con}(A : Ty Γ) → Tm (rpl-T A Ty-G5*)
Tm-G5 A =  rpl-tm A Tm-G5* 

\end{code}
