\begin{code}
module Rational.Properties.Field where

open import Algebra
open import Algebra.Structures
open import Data.Nat using (suc) renaming (_+_ to _ℕ+_ ;  _*_ to _ℕ*_)
open import Data.Function
open import Integer.Setoid.Definition as ℤ₀ using ()
  renaming (_∼_ to _ℤ₀∼_ ; _+_ to _ℤ₀+_ ; _*_ to _ℤ₀*_ ; -_ to ℤ₀-_ ; _◃_ to _ℤ₀◃_)
open import Integer.Definition using (+_; -[1+_]; [_]; ⌜_⌝; +suc)
  renaming (_+_ to _ℤ+_ ; _*_ to _ℤ*_; -_ to ℤ-_ ; _◃_ to _ℤ◃_)
open import Integer.Properties as ℤ using (_*⋆_ ; _⋆*_)
open import NatPropertiesExtra as ℕ using (_+⋆_) renaming (_⋆*_ to _ℕ⋆*_ ; _*⋆_ to  _ℕ*⋆_)
open import Rational.SetoidDef
open import Rational.Properties.BasicProp
open import Relation.Binary
open import Relation.Binary.Core
open import Relation.Binary.PropositionalEquality.Core

import Algebra.FunctionProperties as P; open P _∼_
open import Relation.Binary.PropositionalEquality using (refl ; sym ; trans ; cong; cong₂)

open import Symbols
{-

\end{code}

(ℚ₀, ∼, +, *, 0, 1) is a Field

ℚ₀ has inverse so it is not only a commutative ring, but even a field.


1. + Identity

a) zero is left neutral (left identity) for addition
0 + q = q

\begin{code}

0+q≡q : LeftIdentity qzero _+_
0+q≡q (a /suc b) = ℤ.*-cong (ℤ.0+z≡z (a ℤ* + 1) >≡< ℤ.z*1≡z a)
                      (+suc ⋆ ⟨ ℕ.n+0≡n ⟩)

\end{code}

Note: 'qzero' is the representative zero of rational numbers which I defined before.

b) zero is right neutral (right identity) for addition
q + 0 = q

\begin{code}

q+0≡q : RightIdentity qzero _+_
q+0≡q (a /suc b) = ℤ.*-cong (ℤ.z+0≡z (a ℤ* + 1) >≡< ℤ.z*1≡z a) (+suc ⋆ ⟨ ℕ.n*1≡n b ⟩)

+-identity : Identity qzero _+_
+-identity = 0+q≡q , q+0≡q

\end{code}

As the problem of ring solver I mentioned before that it will lead to crash of Agda at least on my own computer, I have to using all the properties of ℤ to prove the properties of ℚ₀ step by step.

2. + Commutativity

a + b = b + a

\begin{code}

+-comm : Commutative _+_
+-comm (a /suc ad) (b /suc bd) = ℤ.*-cong (ℤ.+-comm (a ℤ* +suc bd) (b ℤ* +suc ad))
  (+_ ⋆ ℕ.*-comm (suc bd) (suc ad))

\end{code}

3. + Associativity

(a + b) + c = a + (b + c)

\begin{code}

ass-lem : ∀ a b c d e f → (a ℤ* (+suc b) ℤ+ c ℤ* (+suc d)) ℤ* (+suc e) ℤ+ f ℤ* (+ ((suc d) ℕ* (suc b)))
  ≡ a ℤ* (+ ((suc b) ℕ* (suc e))) ℤ+ (c ℤ* (+suc e) ℤ+ f ℤ* (+suc b)) ℤ* (+suc d)
ass-lem a b c d e f = ℤ.+-cong (ℤ.distʳ (+suc e) (a ℤ* (+suc b)) (c ℤ* (+suc d)) >≡<
  (ℤ.+-cong (ℤ.*-assoc a (+suc b) (+suc e)) (ℤ.*-ex₂ c (+suc d) (+suc e)))) (f *⋆ (⟨ ℤ.*+-simp d b ⟩ >≡< 
  ℤ.*-comm (+suc d) (+suc b)) >≡< ⟨ ℤ.*-assoc f (+suc b) (+suc d) ⟩) 
  >≡< ℤ.+-assoc (a ℤ* (+suc b ℤ* +suc e)) (c ℤ* +suc e ℤ* +suc d) (f ℤ* +suc b ℤ* +suc d) >≡<
  ℤ.+-cong (a *⋆ ℤ.*+-simp b e) ⟨ (ℤ.distʳ (+suc d) (c ℤ* +suc e) (f ℤ* +suc b)) ⟩

+-assoc : Associative _+_
+-assoc (a /suc ad) (b /suc bd) (c /suc cd) = ℤ.*-cong (ass-lem a bd b ad cd c) (+_ ⋆ ⟨ ℕ.*-assoc (suc ad) (suc bd) (suc cd) ⟩)

\end{code}

4. (_+_, -_) Inverse

a) left inverse
a + (- a) = 0

\begin{code}

+-rightInverse : RightInverse qzero -_ _+_
+-rightInverse (a /suc ad) = (⟨ ℤ.distʳ (+suc ad) a (ℤ- a) ⟩ >≡< ℤ.+-rightInverse a ⋆* +suc ad) ⋆* (+ 1)
\end{code}

b) right inverse
(- a) + a = 0

\begin{code}

+-leftInverse : LeftInverse qzero -_ _+_
+-leftInverse (a /suc ad) = (⟨ ℤ.distʳ (+suc ad) (ℤ- a) a ⟩ >≡< ℤ.+-leftInverse a ⋆* +suc ad)
                              ⋆* (+ 1)

+-inverse : Inverse qzero -_ _+_
+-inverse = +-leftInverse , +-rightInverse

\end{code}

5. * zero

a) 0 * q = 0

\begin{code}

0*q≡0 : LeftZero qzero _*_
0*q≡0 (a /suc ad) = ℤ.0*z≡0 a ⋆* (+ 1)

\end{code}

b) q * 0 = 0

\begin{code}

q*0≡0 : RightZero qzero _*_
q*0≡0 (a /suc ad) = ℤ.z*0≡0 a ⋆* (+ 1)

*-zero : Zero  qzero _*_
*-zero = 0*q≡0 , q*0≡0

\end{code}

6. * identity

a) 1 * q = q

\begin{code}

1*q≡q : LeftIdentity qone _*_
1*q≡q (a /suc ad) = ℤ.*-cong (ℤ.1*z≡z a) (+suc ⋆ ⟨ ℕ.n+0≡n ⟩)

\end{code}

b) q * 1 = q

\begin{code}

q*1≡q : RightIdentity qone _*_
q*1≡q (a /suc ad) = ℤ.*-cong (ℤ.z*1≡z a) (+suc ⋆ ⟨ ℕ.n*1≡n ad ⟩)

*-identity : Identity qone _*_
*-identity = 1*q≡q , q*1≡q

\end{code}

7. * Commutativity

a * b = b * a

\begin{code}

*-comm :  Commutative _*_
*-comm (a /suc ad) (b /suc bd) = ℤ.*-cong (ℤ.*-comm a b) (+_ ⋆ ℕ.*-comm (suc bd) (suc ad))

\end{code}

8. * Assocciativity

(a * b) * c = a * (b * c)

\begin{code}

*-assoc : Associative _*_
*-assoc (a /suc ad) (b /suc bd) (c /suc cd) = ℤ.*-cong (ℤ.*-assoc a b c) (+_ ⋆ ⟨ ℕ.*-assoc (suc ad) (suc bd) (suc cd) ⟩)

\end{code}

9. (ℚ₀, *, +) Distributivity

b) left distributivity
a * (b + c) = a * b + a * c

\begin{code}


dis-lem1 : ∀ a b c d → a ℤ* (b ℤ* (+ c)) ℤ* (+ d) ≡ (a ℤ* b) ℤ* (+ (d ℕ* c))
dis-lem1  a b c d = ⟨ ℤ.*-assoc a b (+ c) ⟩ ⋆* (+ d) >≡<
  ℤ.*-assoc (a ℤ* b) (+ c) (+ d) >≡<
  (a ℤ* b) *⋆ ( ℤ.*-comm (+ c) (+ d) >≡< ℤ.*+-simp d c )

distˡ :  _*_ DistributesOverˡ _+_
distˡ (a /suc ad) (b /suc bd) (c /suc cd) = ℤ.*-cong (ℤ.distˡ a (b ℤ* +suc cd) (c ℤ* +suc bd))
  (+_ ⋆ (ℕ.*-exchange₃ (suc ad) (suc bd) (suc ad) (suc cd) >≡<
  ℕ.*-assoc (suc ad) (suc ad) ((suc bd) ℕ* (suc cd))) >≡<
  ⟨ ℤ.*+-simp (suc ad) ((suc ad) ℕ* ((suc bd) ℕ* (suc cd))) ⟩ ) >≡<
  ⟨ ℤ.*-assoc (a ℤ* (b ℤ* +suc cd) ℤ+ a ℤ* (c ℤ* +suc bd)) (+suc ad) (+ ((suc ad) ℕ* ((suc bd) ℕ* (suc cd)))) ⟩ >≡<
  (ℤ.distʳ (+suc ad) (a ℤ* (b ℤ* +suc cd)) (a ℤ* (c ℤ* +suc bd)) >≡<  (ℤ.+-cong (dis-lem1 a b (suc cd) (suc ad))
  (dis-lem1 a c (suc bd) (suc ad)))) ⋆* (+ (suc ad ℕ* (suc bd ℕ* suc cd)))

\end{code}

c) right distributivity
(b + c) * a = b * a + c * a

\begin{code}


dis-lem2 : ∀ a b c d → (a ℤ* (+ b)) ℤ* c ℤ* (+ d) ≡ (a ℤ* c) ℤ* (+ (b ℕ* d))
dis-lem2  a b c d = (ℤ.*-ex₂ a (+ b) c) ⋆* (+ d) >≡<
  ℤ.*-assoc (a ℤ* c) (+ b) (+ d) >≡<
  (a ℤ* c) *⋆ ( ℤ.*+-simp b d )

distʳ : _*_ DistributesOverʳ _+_
distʳ (a /suc ad) (b /suc bd) (c /suc cd) = ℤ.*-cong (ℤ.distʳ a (b ℤ* +suc cd) (c ℤ* +suc bd))
  (+_ ⋆ ((ℕ.*-comm (suc bd) (suc ad)) ℕ⋆* ((suc cd) ℕ* (suc ad)) >≡<
  ℕ.*-assoc (suc ad) (suc bd) ((suc cd) ℕ* (suc ad)) 
  >≡< (suc ad) ℕ*⋆ ⟨ ℕ.*-assoc (suc bd) (suc cd) (suc ad) ⟩ ) >≡<
  ⟨ ℤ.*+-simp (suc ad) (((suc bd) ℕ* (suc cd)) ℕ* (suc ad)) ⟩ ) >≡<
  ⟨ ℤ.*-assoc ((b ℤ* +suc cd) ℤ* a ℤ+ (c ℤ* +suc bd) ℤ* a) (+suc ad) (+ (((suc bd) ℕ* (suc cd)) ℕ* (suc ad))) ⟩ >≡<
  (ℤ.distʳ (+suc ad) ((b ℤ* +suc cd) ℤ* a) ((c ℤ* +suc bd) ℤ* a) >≡<  (ℤ.+-cong (dis-lem2 b (suc cd) a (suc ad))
  (dis-lem2 c (suc bd) a (suc ad)))) ⋆* (+ (((suc bd) ℕ* (suc cd)) ℕ* (suc ad)))


distrib-*-+ : _*_ DistributesOver _+_
distrib-*-+ = distˡ , distʳ

\end{code}

11. + preserves =

a) some lemmas

\begin{code}

\end{code}

b) a = b → c = d → a + c = b + d

\begin{code}

+-cong-lem : ∀ a b c d e f → (a ℤ* (+ b) ℤ+ c ℤ* (+ d)) ℤ* (+ (e ℕ* f)) ≡
  a ℤ* (+ e) ℤ* ((+ b) ℤ* (+ f)) ℤ+ c ℤ* (+ f) ℤ* ((+ e) ℤ* (+ d))
+-cong-lem a b c d e f = (a ℤ* + b ℤ+ c ℤ* + d) *⋆ ⟨ ℤ.*+-simp e f ⟩ >≡<
  ℤ.distʳ (+ e ℤ* + f) (a ℤ* + b) (c ℤ* + d) >≡<
  ℤ.+-cong (ℤ.*-exchange₃ a (+ b) (+ e) (+ f)) (ℤ.*-exchange₁ c (+ d) (+ e) (+ f))

+-cong : ∀ {a b c d} → a ∼ b → c ∼ d → a + c ∼ b + d
+-cong {a /suc ad} {b /suc bd} {c /suc cd} {d /suc dd} a=b c=d = 
  +-cong-lem a (suc cd) c (suc ad) (suc bd) (suc dd) >≡<
  ℤ.+-cong (ℤ.*-cong a=b (ℤ.*-comm (+suc cd) (+suc dd)))
    (ℤ.*-cong c=d (ℤ.*-comm (+suc bd) (+suc ad))) >≡<
  ⟨ +-cong-lem b (suc dd) d (suc bd) (suc ad) (suc cd) ⟩

\end{code}

12. -_ preserves ≡

a = b → - a = - b

\begin{code}

⁻¹-cong : ∀ {a b} → a ∼ b → - a ∼ - b
⁻¹-cong {a /suc ad} {b /suc bd} a=b = ℤ.-out a (+suc bd) >≡< ℤ-_ ⋆ a=b >≡< ⟨ ℤ.-out b (+suc ad) ⟩

\end{code}

13. * preserves ≡

a) some lemmas

\begin{code}
{-
*-conglem1 : ∀ a b c d → (a ℤ* b) ℤ* ℤi (c ℕ* d) ≡ (a ℤ* (ℤi c)) ℤ* (b ℤ* (ℤi d))
*-conglem1 a b c d = ? begin
  (a ℤ* b) ℤ* ℤi (c ℕ* d)        ≡⟨ cong (λ x → a ℤ* b ℤ* x) (inj*Dist c d) ⟩
  (a ℤ* b) ℤ* (ℤi c ℤ* ℤi d)     ≡⟨ +preslem1-1 a b (ℤi c) (ℤi d) ⟩
  (a ℤ* (ℤi c)) ℤ* (b ℤ* (ℤi d)) ∎
-}
\end{code}

b) a = b → c = d → a * c = b * d

\begin{code}

*-cong : ∀ {a b c d} → a ∼ b → c ∼ d → a * c ∼ b * d
*-cong {a /suc ad} {b /suc bd} {c /suc cd} {d /suc dd} a=b c=d = 
  (a ℤ* c) *⋆ ⟨ ℤ.*+-simp (suc bd) (suc dd) ⟩ >≡<
  ℤ.*-exchange₃ a c (+suc bd) (+suc dd) >≡<
  ℤ.*-cong a=b c=d >≡<
  ℤ.*-exchange₃ b (+suc ad) d (+suc cd) >≡<
  (b ℤ* d) *⋆ ℤ.*+-simp (suc ad) (suc cd)
-}
\end{code}

14. * Inverse

a) some lemmas

\begin{code}
{-
inverselem1 : ∀ a b → -[1+ a ] ℤ* -[1+ b ] ≡ (+ ℕ.suc a) ℤ* (+ ℕ.suc b)
inverselem1 a b = ? {- begin
  nf (ℕ.suc (b ℕ+ a ℕ* ℕ.suc b) , a ℕ* 0)           ≡⟨ cong (λ x → nf (ℕ.suc x , a ℕ* 0)) (sym (ℕ.n+0=n (b ℕ+ a ℕ* ℕ.suc b))) ⟩
  nf (ℕ.suc (b ℕ+ a ℕ* ℕ.suc b ℕ+ 0) , a ℕ* 0)      ≡⟨ cong (λ x → nf (ℕ.suc (b ℕ+ a ℕ* ℕ.suc b ℕ+ 0) , x)) (sym (ℕ.n+0=n (a ℕ* 0))) ⟩
  nf (ℕ.suc (b ℕ+ a ℕ* ℕ.suc b ℕ+ 0) , a ℕ* 0 ℕ+ 0) ∎ -}
-}
\end{code}

b) right inverse
a ≠ 0 → a * 1/a = 1

\begin{code}

*-rightInverse : ∀ x → {p : ¬0 x} → (x * (inverse x {p})) ∼ qone
*-rightInverse ((+ 0) /suc qd) {p} with p refl
... | ()
*-rightInverse ((+ suc q) /suc qd) = ℤ.*-ex₃ (+suc q) (+suc qd) (+ 1) >≡< (+ 1) *⋆ (ℤ.*+-simp (suc qd) (suc q))
*-rightInverse (-[1+ q ] /suc qd) = ℤ.*-ex₃ (-[1+ q ]) (-[1+ qd ]) (+ 1) >≡<
  (+ 1) *⋆ (ℤ.-*cong (-[1+ qd ]) (-[1+ q ]) >≡<
  ℤ.*+-simp (suc qd) (suc q))

\end{code}

c) left inverse
a ≠ 0 → 1/a * a = 1

\begin{code}

*-leftInverse : ∀ x → {p : ¬0 x} → ((inverse x {p}) * x) ∼ qone
*-leftInverse (a /suc ad) {p} = {!!} -- qtrans  {(inverse (a /suc ad) {p}) * (a /suc ad)} {(a /suc ad) * (inverse (a /suc ad) {p})} {qone} (*-comm (inverse (a /suc ad) {p}) (a /suc ad)) (*-rightInverse (a /suc ad) {p})
{-
\end{code}

Because the inverse is not defined on 0, so we cannot combine them into the inverse properties for 'All' ℚ₀


15. (ℚ₀, +, *, qzero, qone) is a Commutative Ring (it is even a Field)

\begin{code}

isCommutativeRing : IsCommutativeRing _∼_ _+_ _*_ -_ qzero qone
isCommutativeRing = record
  { isRing = record
    { +-isAbelianGroup = record
      { isGroup = record
        { isMonoid = record
          { isSemigroup = record
            { isEquivalence = isEquivalenceℚ₀
            ; assoc         = +-assoc
            ; ∙-cong      = λ {a} {b} {c} {d} → +-cong {a} {b} {c} {d}
            }
          ; identity = +-identity
          }
        ; inverse = +-inverse
        ; ⁻¹-cong = λ {a} {b} → ⁻¹-cong {a} {b}
        }
        ; comm = +-comm
     }
    ; *-isMonoid = record
        { isSemigroup = record
          { isEquivalence = isEquivalenceℚ₀
          ; assoc         = *-assoc
          ; ∙-cong      = λ {a} {b} {c} {d} → *-cong {a} {b} {c} {d}
          }
        ; identity = *-identity
        }
    ; distrib = distrib-*-+
    }
  ; *-comm = *-comm
  }

commutativeRing : CommutativeRing
commutativeRing = record
  { _+_                   = _+_
  ; _*_                   = _*_
  ; -_                    = -_
  ; 0#                    = qzero
  ; 1#                    = qone
  ; isCommutativeRing = isCommutativeRing
  }

\end{code}

16. The ring solver for ℚ₀

\begin{code}

import Algebra.RingSolver.Simple as Solver
import Algebra.RingSolver.AlmostCommutativeRing as ACR
module RingSolver =
  Solver (ACR.fromCommutativeRing commutativeRing)

\end{code}

-}