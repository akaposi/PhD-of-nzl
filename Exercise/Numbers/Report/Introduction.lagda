
\section{Introduction and Motivation}
Mathematics is the foundation of computer science. We could find the highly correlation between computer science and mathematics from the word "computer". In fact, as the science and technology of computer are developing faster and faster, we can see that it could contribute to mathematics more than computing.

Old chinese mathematicians using Counting rods to do computing and proving. The invention of more and more symbols for complex definitions increase the complexity of theorem proving exponentially. New inventions of tools such as paper, abacus and computer often strongly affect the development of mathematics. Before computer invented, mathematicians had to prove theorems on papers. The proofs always spread around a pile of papers. It is likely to make mistakes in proofs and it is hard for documentation. In order to eliminate mistakes, verification of proof is essential. However, even spending quite a long time on the verification, no one can ensure the correctness for complicated proofs. Some proofs had been believed to be correct were found incorrect after years later. In 1879 Alfred Bray Kempe announced that he had proved the Four Colour problem. Until 11 years later, Percy John Heawood published a paper proving Kempe was wrong \cite{wiki:4colour}. 

The old ways to conduct proving is very inefficient. Computer changed all the aspects of humans' lives. Computer scientists has created a lot of implementation of the theorem proving by computer programs. With the dependently typed language, such as Coq, Agda and Epigram, mathematicians and programmers could formally prove theorems by writing proofs as programs and the work of verification can be left to computers \cite{alti:ydtm}. Computer could ensure the correctness of proofs. If we believe in the languages, we can believe in the correctness of proofs. The proof assistants has revealed their power in recent years. In 2004, Georges Gonthier and Benjamin Werner have completed their proof of the four color theorem using Coq \cite{wiki:Coq}. Moreover computer could do some automated work which seems impossible to handle by hand.

Agda is one of the proof assistants and it is one of the latest in a series of dependently typed programming languages \cite{aboa}. Unlike tactic-based proof assistant like Coq, it provides a more flexible way of constructing proofs \cite{alti:ydtm}. It has great potential in the field of theorem proving. However as Agda is at its the early stage, it requires contribution to the standard library of Agda. Some of the basic mathematical definitions has been included, such as sets, logic symbols, relations, algebraic structure. It is enough to define more concepts.

For numbers, there are only natural numbers and part of integers defined in the standard library. However to prove most of the mathematical theorems, we need more definitions for other kinds of numbers, not only the integers but also rational numbers, real numbers and complex numbers. Their basic axioms like commutativity and associativity are essential as well.

The project aims at representing the numbers in Agda. The main objective is to define those numbers in most proper ways and proving some basic properties of them that are essential for theorem proving. There are various ways to define each kind of numbers, so to compare, evaluate and make a decision of them are also objectives.

The inner motivations to do this project are that I am interested in how mathematics can be translated into computer science, how to use computer science to help us solve mathematical problems and how to use mathematics to solve computer science problems. The interest in functional programming is also plays a quite important role. I had learnt to use Coq which is also a proof 	assistant like Agda to prove theorems using software tools. I found it interesting to formalise mathematics concepts and doing more than computations such as proving or facilitating calculations.

After undertaking the project I also found it is beneficial for other people as some other students from Chalmers told me they could improve their code by using the library code of numbers. To develop a part of a library is a new challenge in which I could gain more experience and learn more skills. At the same time I could also develop the insight of representing numbers and proving theorems in Agda from doing this project. To do a comparably big research project will also benefit my futher study and career lifes.

In this report, I will discuss from easy and familiar aspects to difficult and new aspects, from abstract concepts to concrete implementations and from the begin of the project to the future potential of the project. The codes of Agda in this report are pruned. I only leave the necessary parts of codes which is more readable but may not be executable.
