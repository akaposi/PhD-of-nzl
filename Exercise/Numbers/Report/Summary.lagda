\section{Summary and future work}

In this project, the various approaches of representing numbers in programming languages are reviewed firstly. Then the exploration of best representation in Agda are undertaken along with the implementation. The definitions were gradually refined by considering the usability, readability and the effects on theorem proving. While being more familiar with Agda and computer-aid formal reasoning, I make use of the tools and library code to improve the implementation. I also learnt from the definition of numbers in other languages by literature review and from codes written by others. Taking the usability and efficiency of properties into consideration, I changed the approaches to prove them several times. The final version has been tested to be acceptable when using the properties proved.

Agda provides increasing number of beneficial features for theorem proving so that it will attract more users. The work of representing numbers can be extended futher in several aspects. Within Agda, other ways to represent each kind of number especially some other construction of exact real number are worth implementing, for example, the dedekind cut and infinite streams may perform better in efficiency. The implementation of quotient types is also a potential extention and we could apply it to the mechanism between setoid and normal forms. It is also interesting to use these definitions and properties in proving more complicated theorems. The work can also be extended in other languages. To review and compare the different representation of numbers in different proof assistants is also a nice topic. 